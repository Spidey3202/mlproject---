import com.aerospike.client.AerospikeClient;
import com.aerospike.client.AerospikeException;
import com.aerospike.client.Key;
import com.aerospike.client.Record;
import com.aerospike.client.policy.ClientPolicy;
import org.apache.commons.lang3.StringUtils;

public class MemberRequestService {

    private AerospikeClient client;

    public MemberRequestService(String host, int port) {
        ClientPolicy policy = new ClientPolicy();
        client = new AerospikeClient(policy, host, port);
    }

    public void close() {
        client.close();
    }

    public ApiRequestDTO fetchCustMemberReq(ApiRequestDTO memberReqDTO) throws Exception {
        try {
            if (StringUtils.isNotBlank(memberReqDTO.getTxnId())) {
                logger.doLog(LOGC.LTI, "Fetching Member request details against TxnID: " + memberReqDTO.getTxnId());

                Key key = new Key("your_namespace", "member_account", memberReqDTO.getTxnId());
                Record record = client.get(null, key);

                if (record != null) {
                    ApiRequestDTO fetchedDTO = mapRecordToDTO(record);
                    memberReqDTO.setStatusCode(CommonConstant.SUCCESS);
                    memberReqDTO.setStatusDesc(CommonConstant.SUCCESS_DESC);
                    return fetchedDTO;
                } else {
                    throw new EmptyResultDataAccessException("No member request details found for TxnId: " + memberReqDTO.getTxnId(), 1);
                }
            } else {
                logger.doLog(LOGC.LTI, "Fetching Member request details against RegNo: " + memberReqDTO.getRegNo());
                // Handle fetching by RegNo if required
                // Code to fetch by RegNo goes here
                memberReqDTO.setStatusCode(CommonConstant.SUCCESS);
                memberReqDTO.setStatusDesc(CommonConstant.SUCCESS_DESC);
            }
        } catch (EmptyResultDataAccessException ex) {
            logger.doLog(LOGC.ITI, "Fetching Member request details not found.", ex);
            memberReqDTO.setStatusCode(CommonConstant.NOT_FOUND);
            memberReqDTO.setStatusDesc(CommonConstant.NOT_FOUND_DESC);
        } catch (Exception ex) {
            logger.doLog(LOGC.LIE, "Exception occurred while fetching Member request details, Exception: " + CommonUtils.getStackTrace(ex), ex);
            memberReqDTO.setStatusCode(CommonConstant.ERROR_STATUS_CODE);
            memberReqDTO.setStatusDesc(CommonConstant.ERROR_STATUS_DESC);
        }
        return memberReqDTO;
    }

    private ApiRequestDTO mapRecordToDTO(Record record) {
        ApiRequestDTO dto = new ApiRequestDTO();
        dto.setTxnId(record.getString("TxnId"));
        dto.setCurrStatusCode(record.getString("CurrStatusCode"));
        // Map other fields as required
        return dto;
    }

    public static void main(String[] args) {
        MemberRequestService service = new MemberRequestService("127.0.0.1", 3000);
        ApiRequestDTO requestDTO = new ApiRequestDTO();
        requestDTO.setTxnId("exampleTxnId");
        try {
            ApiRequestDTO responseDTO = service.fetchCustMemberReq(requestDTO);
            System.out.println("Response: " + responseDTO);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            service.close();
        }
    }
}

class ApiRequestDTO {
    private String txnId;
    private String currStatusCode;
    private int statusCode;
    private String statusDesc;
    // Other fields

    public String getTxnId() {
        return txnId;
    }

    public void setTxnId(String txnId) {
        this.txnId = txnId;
    }

    public String getCurrStatusCode() {
        return currStatusCode;
    }

    public void setCurrStatusCode(String currStatusCode) {
        this.currStatusCode = currStatusCode;
    }

    public int getStatusCode() {
        return statusCode;
    }

    public void setStatusCode(int statusCode) {
        this.statusCode = statusCode;
    }

    public String getStatusDesc() {
        return statusDesc;
    }

    public void setStatusDesc(String statusDesc) {
        this.statusDesc = statusDesc;
    }

    // Getters and setters for other fields

    @Override
    public String toString() {
        return "ApiRequestDTO{" +
                "txnId='" + txnId + '\'' +
                ", currStatusCode='" + currStatusCode + '\'' +
                ", statusCode=" + statusCode +
                ", statusDesc='" + statusDesc + '\'' +
                // Include other fields
                '}';
    }
}

class CommonConstant {
    public static final int SUCCESS = 0;
    public static final String SUCCESS_DESC = "Success";
    public static final int NOT_FOUND = 1;
    public static final String NOT_FOUND_DESC = "Not Found";
    public static final int ERROR_STATUS_CODE = 2;
    public static final String ERROR_STATUS_DESC = "Error";
}

class CommonUtils {
    public static String getStackTrace(Exception ex) {
        // Implement method to get stack trace as string
        return ex.getMessage();
    }
}

class EmptyResultDataAccessException extends Exception {
    public EmptyResultDataAccessException(String message, int num) {
        super(message);
    }
}

class logger {
    public static void doLog(String logLevel, String message) {
        System.out.println(logLevel + ": " + message);
    }

    public static void doLog(String logLevel, String message, Exception ex) {
        System.out.println(logLevel + ": " + message);
        ex.printStackTrace();
    }
}

class LOGC {
    public static final String LTI = "LTI";
    public static final String LIE = "LIE";
}
