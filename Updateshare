import re

# Define the paths to the files
dto_file_path = 'path/to/dto/file'
jdbc_repo_file_path = 'path/to/jdbc/repo/file'
aerospike_repo_file_path = 'path/to/aerospike/repo/file'

# Read the content of the files
with open(dto_file_path, 'r') as file:
    dto_content = file.read()

with open(jdbc_repo_file_path, 'r') as file:
    jdbc_repo_content = file.read()

with open(aerospike_repo_file_path, 'r') as file:
    aerospike_repo_content = file.read()

# Extract fields from the DTO file (assuming fields are defined in a certain format)
fields = re.findall(r'\bprivate\b\s+\b(?:String|int|long|boolean|double|float|char|byte|short|Object)\b\s+(\w+);', dto_content)

# Generate Aerospike bin initialization from fields
def generate_bins(fields, dto_prefix='npciValidateAddrDTO'):
    bins = []
    for field in fields:
        bin_code = f'if (StringUtils.isNotBlank({dto_prefix}.get{field.capitalize()}())) {{\n'
        bin_code += f'    {field} = new Bin("{field.upper()}", {dto_prefix}.get{field.capitalize()}());\n'
        bin_code += f'    columns.add({field});\n'
        bin_code += '}'
        bins.append(bin_code)
    return '\n'.join(bins)

# Extract the insert method from the JDBC repo file
jdbc_insert_method = re.search(r'public void insertQueue\(.+?NPCIValidateAddrDTO .+?\{(.+?)\}', jdbc_repo_content, re.DOTALL)

# If an insert method is found, process it
if jdbc_insert_method:
    jdbc_insert_method_body = jdbc_insert_method.group(1)
    
    # Generate the corresponding Aerospike insert method
    aerospike_insert_method_content = f"""
    public void insertQueue(NPCIValidateAddrDTO npciValidateAddrDTO) {{
        String key = null;
        WritePolicy writePolicy = new WritePolicy();
        Bin txnId = null;
        Bin payeeName = null;
        Bin payeeAddress = null;
        Bin currStatusCode = null;
        Bin currStatusDesc = null;
        try {{
            logger.doLog(LOGC.LTI, npciValidateAddrDTO.getTxnId(), 
                "Insert request into queue table: payee name " + npciValidateAddrDTO.getPayeeName());
            key = npciValidateAddrDTO.getTxnId();
            List<Bin> columns = new ArrayList<>();
            {generate_bins(fields)}
            boolean updateStatus = aerospikeClientUtils.updateBins("VIRTQUEUE", key, writePolicy, columns.toArray(new Bin[0]));
            if (updateStatus) {{
                logger.doLog(LOGC.LTI, npciValidateAddrDTO.getTxnId(), "Record inserted into queue table", "");
                npciValidateAddrDTO.setStatusCode(CommonConstant.SUCCESS);
                npciValidateAddrDTO.setStatusDesc(UPIApiConstants.SUCCESS_DESC);
            }} else {{
                logger.doLog(LOGC.LTI, npciValidateAddrDTO.getTxnId(), "Failed to insert into queue table", "");
                npciValidateAddrDTO.setStatusCode(CommonConstant.FAILED);
                npciValidateAddrDTO.setStatusDesc(UPIApiConstants.FAILED_DESC);
            }}
        }} catch (Exception e) {{
            logger.doLog(LOGC.LTE, npciValidateAddrDTO.getTxnId(), "Error Occurred: " + CommonUtils.getStackTrace(e), "");
            npciValidateAddrDTO.setStatusCode(CommonConstant.ERROR_STATUS_CODE);
            npciValidateAddrDTO.setStatusDesc(UPIApiConstants.ERROR_DESC);
        }}
    }}
    """

    # Integrate the new method into the Aerospike repo file
    aerospike_repo_content = re.sub(r'(public void insertQueue\(.+?\{.+?\})', aerospike_insert_method_content, aerospike_repo_content, flags=re.DOTALL)

    # Write the updated Aerospike repo content back to the file
    with open(aerospike_repo_file_path, 'w') as file:
        file.write(aerospike_repo_content)

    print("Aerospike repository file updated successfully.")
else:
    print("No insert method found in the JDBC repository file.")
